#!/bin/bash
CONFIG_FILE="/etc/sshtun/sshtun.conf"
HOSTS_FILE=""

SSH_USER=""
SSH_PORT=""
SSH_COMMAND_TEMPLATE="ssh -D port -f -C -q -N connection # alias"
SSH_SEARCH_STRING="[s]sh -D"

FIREFOX_PROFILE=""
FIREFOX_EXECUTABLE_PATH=""
FIREFOX_PROFILES_PATH=""

VERBOSE=0

YELLOW='\033[0;33m'
LIGHT_RED='\033[1;31m'
NO_COLOR='\033[0m'

function get_property_from_file
{
    grep -w "${1}" $CONFIG_FILE | cut -d'=' -f2
}

function start_tunel
{
	local ipOrAlias=$1
	is_valid_ip $ipOrAlias

	if [ $? -eq 0 ]; then
		start $ipOrAlias $SSH_USER $SSH_PORT $ipOrAlias
		return 0
	fi

	local ip=$(cat $HOSTS_FILE | grep -w "$ipOrAlias" | tr -d '\n' | awk '{print $1}' | tr -d "\040\011\012\015")
	start $ip $SSH_USER $SSH_PORT $ipOrAlias
}

function start
{
	local ip=$1
	log_debug "ip: $ip"

	local user=$2
	log_debug "user: $user"

	local port=$3
	log_debug "port: $port"

	local alias=$4
	log_debug "alias: $alias"

	local connection="$user@$ip"
	local sshCommand=$(sed -e "s/port/$SSH_PORT/" -e "s/connection/$connection/" -e "s/alias/$alias/" <<< "$SSH_COMMAND_TEMPLATE")
	log_debug "command: $sshCommand"

	ssh-copy-id $connection > /dev/null 2>&1
	eval "$sshCommand"

	log_debug "Tunnel started."
}

function kill_tunnels
{
	local result=""
	result=$(ps aux | pgrep -f "$SSH_SEARCH_STRING")
	local returnCode=$?

	if [ $returnCode -eq 1 ]; then
		echo "Cannot find SSH processes!"
		return 1
	else
		pid_array=($result)

		for pid in "${pid_array[@]}"
		do
			echo "Killing $pid..."

			kill "$pid"
			returnCode=$?

			if [ $returnCode -eq 0 ]; then
				echo "Successfully killed proces with PID: $pid"
			else
				echo "Failed to kill process with PID: $pid"
			fi
		done
	fi
}

function list_tunnels
{
	local tunels=""
	tunels=$(ps aux | grep "$SSH_SEARCH_STRING")
	local returnCode=$?

	if [ $returnCode -eq 1 ]; then
		log_info "No active tunnels."
	else
		log_info "Displaying active tunnels..."
		echo "$tunels"
		returnCode=$?
	fi
}

function read_config_file
{
	log_info "Displaying configuration file..."
	column -t "$CONFIG_FILE"
}

function is_valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

function set_user_pref()
{
	if [ $(grep -c "user_pref(\"$2\", .*);" $1) -eq 1 ]; then
		sed -i .bckp "s/user_pref(\"$2\", .*);/user_pref(\"$2\", $3);/" $1
	else
		echo "user_pref(\"$2\", $3);" >> $1
	fi
}

function create_firefox_profile
{
	local ff_profile=$FIREFOX_PROFILE
	log_debug "Firefox Profile: $ff_profile"

	if [ -z "$ff_profile" ]; then
		log_debug "No Firefox profile will be created."
		return 0
	fi

	local proxy_port=$2
	local profile_path="."

	# Create new firefox profile to be configured with the SOCKS proxy
	local profileDir=$FIREFOX_PROFILES_PATH/*.$ff_profile/

	if [ ! -d $profileDir ]; then
		log_debug "Creating Firefox profile..."
		$FIREFOX_EXECUTABLE_PATH/firefox -CreateProfile $ff_profile
	fi

	log_debug "Found existing Firefox profile $ff_profile"
	cd $profileDir

	set_user_pref $profile_path/prefs.js network.proxy.type 1
	set_user_pref $profile_path/prefs.js network.proxy.socks_remote_dns true
	set_user_pref $profile_path/prefs.js network.proxy.socks \"localhost\"
	set_user_pref $profile_path/prefs.js network.proxy.socks_port $proxy_port
}

function print_help
{
	cat << EOF
DESCRIPTION
Manage SSH tunnels.

OPTIONS
-c				Print the contents of the configuration file.
-k				Kills all currently active SSH tunnels.
-l				List all currently active SSH tunnels.
-s <alias>		Starts an SSH tunel with the given alias.
-h				Help.

EXAMPLES
sshtun -s local
EOF
}

log_info()
{
    local text=$1
	echo -e "${YELLOW}[$(date)]: ${YELLOW}$text${NO_COLOR}"
}

log_debug()
{
	local text=$1

	if [ $VERBOSE -eq 1 ]; then
		echo -e "${LIGHT_RED}[DEBUG][$(date)]: ${LIGHT_RED}$text${NO_COLOR}"
	fi
}

init()
{
	log_debug "Initializing configuration variables..."

	HOSTS_FILE=$(get_property_from_file "hosts.path")
	log_debug $HOSTS_FILE

	SSH_USER=$(get_property_from_file "ssh.user")
	log_debug $SSH_USER

	SSH_PORT=$(get_property_from_file "ssh.port")
	log_debug $SSH_PORT

	FIREFOX_PROFILE=$(get_property_from_file "firefox.profile")
	log_debug $FIREFOX_PROFILE

	FIREFOX_EXECUTABLE_PATH=$(get_property_from_file "firefox.executable.path")
	FIREFOX_PROFILES_PATH=$(get_property_from_file "firefox.profiles.path")
}

# Main
init

# check for single character options
while getopts ":cklh:ps:v" opt; do
	case $opt in
		s)
			create_firefox_profile $FIREFOX_PROFILE $SSH_PORT
			start_tunel "$OPTARG"
		;;
		k)
			kill_tunnels
		;;
		l)
			list_tunnels
		;;
		c)
			read_config_file
		;;
		h)
			print_help
		;;
		v)
			VERBOSE=1
		;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
		;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
		;;
	esac
done
